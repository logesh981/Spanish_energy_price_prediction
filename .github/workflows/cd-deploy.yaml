
name: CD-Deploy
on:
  push:
    branches:
      - 'develop'
    paths:
      - '**'

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # Define the infrastructure
      - name: TF plan
        id: tf-plan
        working-directory: 'terraform'
        run: |
          terraform init && terraform plan

      - name: TF Apply
        id: tf-apply
        working-directory: 'terraform'
        if: ${{ steps.tf-plan.outcome }} == 'success'
        run: |
          terraform apply -auto-approve
          echo "::set-output name=ecr_repo::$(terraform output ecr_repo | xargs)"

      # # Build-Push
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Build, tag, and push image to Amazon ECR
      #   id: build-image-step
      #   working-directory: "**"
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ steps.tf-apply.outputs.ecr_repo }}
      #     IMAGE_TAG: "latest"   # ${{ github.sha }}
      #   run: |
      #     docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     echo "::set-output name=image_uri::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # # Deploy
      # - name: Get model artifacts


      #   id: get-model-artifacts
      #   working-directory: "06-best-practices/code"
      #   env:
      #     MODEL_BUCKET_DEV: "mlflow-remote"
      #     MODEL_BUCKET_PROD: ${{ steps.tf-apply.outputs.model_bucket }}
      #   run: |
      #     export RUN_ID=$(aws s3api list-objects-v2 --bucket ${MODEL_BUCKET_DEV} \
      #     --query 'sort_by(Contents, &LastModified)[-1].Key' --output=text | cut -f2 -d/)
      #     aws s3 sync s3://${MODEL_BUCKET_DEV} s3://${MODEL_BUCKET_PROD}
      #     echo "::set-output name=run_id::${RUN_ID}"
